// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package broadcaster

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockRegistry creates a new instance of MockRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegistry {
	mock := &MockRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRegistry is an autogenerated mock type for the Registry type
type MockRegistry struct {
	mock.Mock
}

type MockRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegistry) EXPECT() *MockRegistry_Expecter {
	return &MockRegistry_Expecter{mock: &_m.Mock}
}

// Broadcast provides a mock function for the type MockRegistry
func (_mock *MockRegistry) Broadcast(message Message) {
	_mock.Called(message)
	return
}

// MockRegistry_Broadcast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Broadcast'
type MockRegistry_Broadcast_Call struct {
	*mock.Call
}

// Broadcast is a helper method to define mock.On call
//   - message Message
func (_e *MockRegistry_Expecter) Broadcast(message interface{}) *MockRegistry_Broadcast_Call {
	return &MockRegistry_Broadcast_Call{Call: _e.mock.On("Broadcast", message)}
}

func (_c *MockRegistry_Broadcast_Call) Run(run func(message Message)) *MockRegistry_Broadcast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Message
		if args[0] != nil {
			arg0 = args[0].(Message)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRegistry_Broadcast_Call) Return() *MockRegistry_Broadcast_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRegistry_Broadcast_Call) RunAndReturn(run func(message Message)) *MockRegistry_Broadcast_Call {
	_c.Run(run)
	return _c
}

// Connect provides a mock function for the type MockRegistry
func (_mock *MockRegistry) Connect(connection *Connection) error {
	ret := _mock.Called(connection)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Connection) error); ok {
		r0 = returnFunc(connection)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRegistry_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockRegistry_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - connection *Connection
func (_e *MockRegistry_Expecter) Connect(connection interface{}) *MockRegistry_Connect_Call {
	return &MockRegistry_Connect_Call{Call: _e.mock.On("Connect", connection)}
}

func (_c *MockRegistry_Connect_Call) Run(run func(connection *Connection)) *MockRegistry_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Connection
		if args[0] != nil {
			arg0 = args[0].(*Connection)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRegistry_Connect_Call) Return(err error) *MockRegistry_Connect_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRegistry_Connect_Call) RunAndReturn(run func(connection *Connection) error) *MockRegistry_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function for the type MockRegistry
func (_mock *MockRegistry) Disconnect(connectionId string) {
	_mock.Called(connectionId)
	return
}

// MockRegistry_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type MockRegistry_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
//   - connectionId string
func (_e *MockRegistry_Expecter) Disconnect(connectionId interface{}) *MockRegistry_Disconnect_Call {
	return &MockRegistry_Disconnect_Call{Call: _e.mock.On("Disconnect", connectionId)}
}

func (_c *MockRegistry_Disconnect_Call) Run(run func(connectionId string)) *MockRegistry_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRegistry_Disconnect_Call) Return() *MockRegistry_Disconnect_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRegistry_Disconnect_Call) RunAndReturn(run func(connectionId string)) *MockRegistry_Disconnect_Call {
	_c.Run(run)
	return _c
}

// Subscribe provides a mock function for the type MockRegistry
func (_mock *MockRegistry) Subscribe(channelId string, connectionId string) error {
	ret := _mock.Called(channelId, connectionId)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(channelId, connectionId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRegistry_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockRegistry_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - channelId string
//   - connectionId string
func (_e *MockRegistry_Expecter) Subscribe(channelId interface{}, connectionId interface{}) *MockRegistry_Subscribe_Call {
	return &MockRegistry_Subscribe_Call{Call: _e.mock.On("Subscribe", channelId, connectionId)}
}

func (_c *MockRegistry_Subscribe_Call) Run(run func(channelId string, connectionId string)) *MockRegistry_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRegistry_Subscribe_Call) Return(err error) *MockRegistry_Subscribe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRegistry_Subscribe_Call) RunAndReturn(run func(channelId string, connectionId string) error) *MockRegistry_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function for the type MockRegistry
func (_mock *MockRegistry) Unsubscribe(channelId string, connectionId string) {
	_mock.Called(channelId, connectionId)
	return
}

// MockRegistry_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type MockRegistry_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - channelId string
//   - connectionId string
func (_e *MockRegistry_Expecter) Unsubscribe(channelId interface{}, connectionId interface{}) *MockRegistry_Unsubscribe_Call {
	return &MockRegistry_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", channelId, connectionId)}
}

func (_c *MockRegistry_Unsubscribe_Call) Run(run func(channelId string, connectionId string)) *MockRegistry_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRegistry_Unsubscribe_Call) Return() *MockRegistry_Unsubscribe_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRegistry_Unsubscribe_Call) RunAndReturn(run func(channelId string, connectionId string)) *MockRegistry_Unsubscribe_Call {
	_c.Run(run)
	return _c
}
